{"version":3,"sources":["background.jpg","sounds/beep.mp3","sounds/danger.mp3","sounds/correct.mp3","sounds/warning.mp3","components/Button.js","utils/compareAnswers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","backgroundColor","onClick","className","style","current","correct","partialAnswers","map","x","i","console","log","includes","length","correctAnswer","App","state","currentAnswer","boom","success","warning","attempts","checkAnswers","result","compareAnswers","setState","document","getElementById","play","setTimeout","handleButtonClick","index","cloneNode","newAnswer","push","localStorage","getItem","parsed","JSON","parse","this","setItem","stringify","src","background","alt","preload","id","beep","danger","warningSound","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ae2b0ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.54852844.jpg\";","module.exports = __webpack_public_path__ + \"static/media/beep.b006268b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/danger.c6b6aef2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/correct.b729672e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/warning.fac8e2e8.mp3\";","import React from 'react';\n\nconst Button = ({ backgroundColor, onClick }) => (\n    <div\n        className=\"round-button\"\n        style={{ backgroundColor }}\n        onClick={onClick}\n    >\n        <div className=\"button-overlay\" />\n    </div>\n);\n\nexport default Button;","export default function(current, correct) {\n    const partialAnswers = current.map((x, i) => x === correct[i]);\n\n    console.log('partialAnswers', partialAnswers)\n\n    if (partialAnswers.includes(false)) return 'INCORRECT';\n\n    return current.length === correct.length ? 'CORRECT' : 'OK';\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport background from './background.jpg';\nimport beep from './sounds/beep.mp3'\nimport danger from './sounds/danger.mp3'\nimport correct from './sounds/correct.mp3'\nimport warningSound from './sounds/warning.mp3'\n\nimport Button from './components/Button';\nimport compareAnswers from './utils/compareAnswers';\n\nconst correctAnswer = [1, 0, 2, 2]\n\nclass App extends Component {\n  state = {\n    currentAnswer: [],\n    boom: false,\n    success: false,\n    warning: false,\n    attempts: 3,\n  }\n\n  componentDidMount() {\n      const state = localStorage.getItem('state')\n      if (state) {    \n        const parsed = JSON.parse(state);    \n        this.setState(parsed)\n      }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('state', JSON.stringify(this.state))    \n  }\n  \n\n  checkAnswers = () => {\n    const { currentAnswer, attempts } = this.state;\n\n    const result = compareAnswers(currentAnswer, correctAnswer)\n\n    if (result === 'INCORRECT') {\n\n      if (attempts === 1) {\n        this.setState({ boom: true });\n        document.getElementById('danger').play()\n      } else {\n        this.setState({ warning: true })\n        document.getElementById('warning').play()\n        setTimeout(() => {\n          this.setState({ warning: false })\n        }, 2000);\n      }\n\n      this.setState({\n        attempts: attempts - 1,\n        currentAnswer: [],\n      })\n    }\n\n    if (result === 'CORRECT') {\n      this.setState({ success: true });\n      document.getElementById('correct').play()\n    }\n  }\n\n  handleButtonClick = index => () => {\n    const { currentAnswer, warning, boom, success } = this.state;\n    document.getElementById('beep').cloneNode().play()\n\n    if (warning || boom || success) return;\n\n    const newAnswer = [ ...currentAnswer ]\n    newAnswer.push(index)\n    this.setState({ currentAnswer: newAnswer }, this.checkAnswers);\n  }\n\n  render() {\n    const { attempts, warning, success, boom } = this.state;\n\n    return(\n      <div className=\"app-container\">\n        <img src={background} alt=\"fondo\" className=\"background-image\" />\n        <Button backgroundColor=\"red\" onClick={this.handleButtonClick(0)} />\n        <Button backgroundColor=\"blue\" onClick={this.handleButtonClick(1)} />\n        <Button backgroundColor=\"purple\" onClick={this.handleButtonClick(2)} />\n        <div className=\"attempts-text\">\n          Tenés {attempts} intento{attempts > 1 ? 's' : ''} restante{attempts > 1 ? 's' : ''} de ingresar el código correcto, sino ¡CORRÉ!\n        </div>\n        {warning && (\n          <div className=\"attempts-warning\">\n            INCORRECTO\n            {attempts === 1 && ', ¡ÚLTIMO INTENTO!'}\n            {attempts === 2 && ', ¡SEGUNDO INTENTO!'}\n          </div>\n        )}\n        {success && (\n          <div className=\"modal modal-success\">\n            <div className=\"modal-title\">проклятие</div>\n            <div className=\"modal-subtitle\">SALVASTE LA PLANTA NUCLEAR</div>\n            <div className=\"modal-body\">¡ARRUINASTE TODO MI TRABAJO!</div>\n          </div>\n        )}\n        {boom && (\n          <div className=\"modal modal-error\">\n            <div className=\"modal-title\">опасность</div>\n            <div className=\"modal-subtitle\">ACELERASTE EL PROCESO DE DESTRUCCIÓN</div>\n            <div className=\"modal-body\">¡TODOS MORIRAN!</div>\n          </div>\n        )}\n        <audio preload=\"true\" id=\"beep\" src={beep} />\n        <audio preload=\"true\" id=\"danger\" src={danger} />\n        <audio preload=\"true\" id=\"correct\" src={correct} />\n        <audio preload=\"true\" id=\"warning\" src={warningSound} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}